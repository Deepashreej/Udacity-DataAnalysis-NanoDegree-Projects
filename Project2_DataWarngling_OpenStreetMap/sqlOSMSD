import sqlite3
import csv
from pprint import pprint

sqlite_file = 'OSMSD.db'
conn = sqlite3.connect(sqlite_file)

cur = conn.cursor()

cur.execute('''DROP TABLE IF EXISTS nodes_tags''')
conn.commit()

cur.execute('''DROP TABLE IF EXISTS nodes''')
conn.commit()

cur.execute('''DROP TABLE IF EXISTS ways''')
conn.commit()

cur.execute('''DROP TABLE IF EXISTS ways_tags''')
conn.commit()

cur.execute('''DROP TABLE IF EXISTS ways_nodes''')
conn.commit()
# Create the table, specifying the column names and data types:
cur.execute('''
    CREATE TABLE nodes_tags(id INTEGER, key TEXT, value TEXT,type TEXT)
''')
cur.execute('''
    CREATE TABLE nodes(id INTEGER, lat NUM, lon NUM, user TEXT, uid INTEGER, version INTEGER, changeset INTEGER, timestamp TIMESTAMP)
''')
cur.execute('''
    CREATE TABLE ways(id INTEGER, user TEXT, uid INTEGER, version INTEGER, changeset INTEGER, timestamp TIMESTAMP)
''')
cur.execute('''
    CREATE TABLE ways_tags(id INTEGER, key TEXT, value TEXT,type TEXT)
''')
cur.execute('''
    CREATE TABLE ways_nodes(id INTEGER, node_id real, position INTEGER)
''')

# commit the changes
conn.commit()

# Read in the csv file as a dictionary, format the
# data as a list of tuples:
with open('nodes_tags.csv','rb') as fin:
    dr = csv.DictReader(fin) # comma is default delimiter
    to_db = [(i['id'], i['key'], i['value'].decode("utf-8"), i['type']) for i in dr]
# insert the formatted data
cur.executemany("INSERT INTO nodes_tags(id, key, value,type) VALUES (?, ?, ?, ?);", to_db)

with open('nodes.csv','rb') as fin:
    dr = csv.DictReader(fin) # comma is default delimiter
    to_db = [(i['id'], i['lat'], i['lon'], i['user'].decode("utf-8"), i['uid'], i['version'], i['changeset'], i['timestamp']) for i in dr]
cur.executemany("INSERT INTO nodes(id,lat,lon,user,uid,version,changeset,timestamp) values (?, ?, ?, ?, ?, ?, ?, ?);", to_db)

with open('ways.csv','rb') as fin:
    dr = csv.DictReader(fin) # comma is default delimiter
    to_db = [(i['id'], i['user'].decode("utf-8"), i['uid'], i['version'], i['changeset'], i['timestamp']) for i in dr]
cur.executemany("INSERT INTO ways(id, user, uid, version, changeset, timestamp) VALUES (?, ?, ?, ?, ?, ?);", to_db)

with open('ways_tags.csv','rb') as fin:
    dr = csv.DictReader(fin) # comma is default delimiter
    to_db = [(i['id'], i['key'], i['value'].decode("utf-8"), i['type']) for i in dr]
cur.executemany("INSERT INTO ways_tags(id, key, value,type) VALUES (?, ?, ?, ?);", to_db)

with open('ways_nodes.csv','rb') as fin:
    dr = csv.DictReader(fin) # comma is default delimiter
    to_db = [(i['id'], i['node_id'], i['position']) for i in dr]
cur.executemany("INSERT INTO ways_nodes(id, node_id, position) VALUES (?, ?, ?);", to_db)

# commit the changes
conn.commit()

cur.execute('SELECT * FROM nodes_tags where rownum <=10')
all_rows = cur.fetchall()
print('1):')
pprint(all_rows)

cur.execute('SELECT * FROM nodes where rownum <=10'')
all_rows = cur.fetchall()
print('2):')
pprint(all_rows)

cur.execute('SELECT * FROM ways where rownum <=10'')
all_rows = cur.fetchall()
print('3):')
pprint(all_rows)

cur.execute('SELECT * FROM ways_tags where rownum <=10'')
all_rows = cur.fetchall()
print('4):')
pprint(all_rows)

cur.execute('SELECT * FROM ways_nodes where rownum <=10'')
all_rows = cur.fetchall()
print('5):')
pprint(all_rows)




